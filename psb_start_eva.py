import streamlit as st
import pymorphy2
from datetime import datetime

morph = pymorphy2.MorphAnalyzer()

# ==== –î–ê–ù–ù–´–ï ====

# –ü–ª–∞–Ω –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
adaptation_plan = {
    1: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–∞–Ω–∫–æ–º –∏ –∫–æ–º–∞–Ω–¥–æ–π",
    2: "–û–±–∑–æ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤",
    3: "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–≤ –∏ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—ã",
    4: "–û–±–∑–æ—Ä –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã –ü–°–ë",
    5: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –ü–°–ë",
    6: "–ü–µ—Ä–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º",
    7: "–û–±–µ–¥ —Å –∫–æ–º–∞–Ω–¥–æ–π. –í 13:00 –≤ –∫–∞—Ñ–µ –Ω–∞ 1 —ç—Ç–∞–∂–µ."
}

# –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
faq = {
    "–¥–æ—Å—Ç—É–ø": "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø—ã, –æ–±—Ä–∞—Ç–∏—Å—å –≤ HelpDesk —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
    "–ø—Ä–æ–¥—É–∫—Ç": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –ü–°–ë –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π¬ª –Ω–∞ –∏–Ω—Ç—Ä–∞–Ω–µ—Ç–µ.",
    "–æ–±–µ–¥": "–û–±–µ–¥ —Å –∫–æ–º–∞–Ω–¥–æ–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ 13:00. –ú–µ—Å—Ç–æ: –∫–∞—Ñ–µ –Ω–∞ 1 —ç—Ç–∞–∂–µ.",
    "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å": "–û–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å, —á–µ—Ä–µ–∑ –∞–Ω–∫–µ—Ç—É –Ω–∏–∂–µ.",
}

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
reminders = {
    5: "–ó–∞–≤—Ç—Ä–∞ —Ç—Ä–µ–Ω–∏–Ω–≥ ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂¬ª –≤ 10:00",
    6: "–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏!",
}

# –ú–∏–Ω–∏-–∫–≤–∏–∑
quiz_question = "–ö–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É?"
quiz_answer = "—Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä"

# –°—Ç–∞—Ç—É—Å
employee_progress = {
    "–ê–Ω–Ω–∞": 0.7,
    "–í–∏–∫—Ç–æ—Ä": 0.4,
}

# ==== –§–£–ù–ö–¶–ò–ò ====

def lemmatize(text):
    return [morph.parse(word)[0].normal_form for word in text.lower().split()]

def match_faq(lemmas):
    for lemma in lemmas:
        for key in faq:
            if key in lemma:
                return faq[key]
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É."

def check_reminder(day):
    return reminders.get(day, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

def get_today_plan(day):
    return adaptation_plan.get(day, "–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def quiz_check(answer):
    return answer.lower().strip() == quiz_answer.lower()

# ==== –ò–ù–¢–ï–†–§–ï–ô–° ====

st.set_page_config(page_title="PSB Start | –ï–≤–∞", page_icon="ü§ñ")
st.title("ü§ñ –ï–≤–∞ ‚Äî –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤ –ü–°–ë")

# –í–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
st.sidebar.header("üìÜ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")
day = st.sidebar.number_input("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ (–æ—Ç 1 –¥–æ 7):", min_value=1, max_value=7, value=1)

# –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
st.subheader("üìã –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
st.info(get_today_plan(day))

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
st.subheader("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
st.warning(check_reminder(day))

# –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
st.subheader("‚ùì –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã")
user_question = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")

if user_question:
    lemmas = lemmatize(user_question)
    answer = match_faq(lemmas)
    st.success(answer)

# –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
st.subheader("üìà –ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?")
feeling = st.slider("–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç 1 (–ø–ª–æ—Ö–æ) –¥–æ 5 (–æ—Ç–ª–∏—á–Ω–æ)", 1, 5)
if feeling <= 2:
    st.error("‚ùóÔ∏è –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
elif feeling <= 3:
    st.warning("üëÄ –ú—ã –≤–∏–¥–∏–º, —á—Ç–æ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∏–¥—ë—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –ï–≤–∞ —Ä—è–¥–æ–º.")
else:
    st.success("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")

# –ú–∏–Ω–∏-–∫–≤–∏–∑
st.subheader("üéì –ú–∏–Ω–∏-–æ–±—É—á–µ–Ω–∏–µ")
user_quiz = st.text_input(quiz_question)
if user_quiz:
    if quiz_check(user_quiz):
        st.success("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        st.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
st.sidebar.header("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
selected_emp = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", list(employee_progress.keys()))
progress = employee_progress[selected_emp]
st.sidebar.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", f"{int(progress * 100)}%")

if selected_emp == "–í–∏–∫—Ç–æ—Ä" and feeling <= 3:
    st.sidebar.error("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª —Ä–∏—Å–∫–∞: –í–∏–∫—Ç–æ—Ä –æ—Ü–µ–Ω–∏–ª –∞–¥–∞–ø—Ç–∞—Ü–∏—é –Ω–∏–∂–µ 3 –¥–≤–∞–∂–¥—ã")
